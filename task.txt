x Criar o projeto com react e configurar ele

x Vai ter um type chamado statusType, com esses valores (Pendente, Em andamento, Concluída)
x Vai ter um type chamado priorityType, com esses valores (Alta, Média, Baixa)

x Interface de ITask
    x title: string
    x descriptions: string
    x priority: priorityType
    x status: statusType
    x id: string

x Criar toda a estrutura de contextApi para as tasks
    x O tipo de dado guardado aqui será do tipo ITask
    x As funções que ele executará é
        x Add task que espera receber ITask sem id, (ai aqui eu tenho que criar um tipo desse sem id) e add ao state e criará um id aqui
        x Editar task que espera receber ITask pegar o id passado e usa para buscar a task dentro do state ao encontrar, ele atualiza os dados dessa task sem criar um novo id
        x Remover, ele espera receber um id, e com esse id ele procura a task e remove ela
        x toggleStatus, em que espera receber um id e um tipo statusType com o id que ele recebe ele busca o id e altera o status da task, usando o dado recebido

x Criar type de selectProp
    x value: string
    x option: string

x Criar um inputComponent que tem uma ref também para expor seus atributos
    x Terá uma prop chamada label: string
    x A estilização será essa:
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
                        <input
                            ref={ref}
                            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                        />
                    </div>

x Criar um select component
    x Espera receber uma prop de options que é um array de selectProp
    x A estilização:
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
                        <select className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400">
                           // Aqui é um map da prop de options  <option value={prop.value}>{prop.option}</option>
                        </select>
                    </div>

x Substituir seu uso no modalComponent

x Criar um modalComponent de formulario, ele usa o memo 
    x Esse componente ele espera receber de forma opcional ou sejá não obrigatoria uma prop do tipo ITask
    x Esse componente ele terá um formulario que usará o forwardRef para conseguir resetar todos os inputs dentro dele, que serão
        x Input para titulo usando o inputComponent passando o label e o placeholder
        x Input para descrição usando o inputComponent passando o label e o placeholder
        x Campo de seleção de prioridade que terão as opções de priorityType
        x Campo de seleção de status que terão as opções de statusType
    x Se o param que esse componente espera receber vier com dados os campos receberam como value esses dados, do contrario eles ficam vazios mesmos
    x Se o param que esse componente espera receber vier com dados nesse component terá o botão de add tarefa que chama a função do contextApi de add tarefas passando os dados necessarios, do contrario será um botão escrito confirmar edição que chamará o método de editar do contextApi passando todos os dados
        x Ambas as funcionalidades do botão fecham o modal 
        x Ambas as funcionalidades não precisa apagar os dados no input ao fechar a tela ou ao salvar os dados esse componente
    x Terá um botão nesse modal escrito fechar, que fecha o modal, não precisa apagar os dados no input ao fechar a tela ou ao salvar os dados esse componente

x Planejar o card

x Fazer um card component que posso estilizar com o tailwind css e recebe as seguintes props:
    x status: StatusType
    x title: string
    x description: string
    x priority: PriorityType
    x id: string
    x isChecked: bolean
x Esse componente usa o memo 
x Incluir nele um console log nas props só para calra os erros de falta de uso
x No App terá um botão de add tarefas, que abrirá um modalComponent
x Criar um componente chamado TaskDashboard
    x Criar função chamada isChecked que esperar receber do tipo statusType e ver se status é diferente de concluido, se for retorna false, senão true
    - Criar um .map que vai exibir os components de cards e puxando os dados do state armazenado no contextApi e passar para esse card esses valores
        - No caso do status, ao passar eu chamo a função isChecked, passando de param o status
    - Ele terá um botão de limpar que ao ser clicado chama o ref do componente de modalComponent e reseat os campos de input do formulario
- Usando o ref no modalComponent ele deverá acessar o campo de titulo e ao abrir o form ele já está em foco
- Colocar o TaskDashboard no App VER ZAP TASKS
- O modal component terá:
    - Função para serializar, o nome da função é serializarLabels ele esperar receber como param o statusType ou priorityType e ai tenho que alterar os nomes para labels que de paar ser usado para o user e retornar esse nome serializado
    - Checkbox a esquerda do titulo, que recebe do isChecked
        - Ao ser clicado ele valida se o
            - O novo valor for true, marca ele e passa junto com o id a palavra concluida, para a função toggleStatus do contextApi
            - O novo valor for false, desmarca ele e a palavra é pendente e chama a função toggleStatus do contextApi, passando o id tbm            
    - Titulo na parte superior a esquerda que recebe de title
    - Descrição abaixo do Titulo que recebe de description
    - Status de prioridade na parte superior a direita que será do tipo priorityType que chama a função serializarLabels
    - Status que será do tipo statusType que chama a função serializarLabels
    - Botão de editar task, que ao ser clicada passa para os modalComponent todos os dados do card
    - Botão de remover, que chama o método de deletar do contextApi passando o id

- Colocar na tela do TaskDashboard  a quantidade total de tarefas que é o retorno de uma functions que ver a quantidade de tasks no state, essa função que tem useMemo, que só atualiza quando o state do contextApi for atualizado




- Testes
    - Testar funcionalidade de add task
        - Ao add a task abrirá um modal de add task em que se eu salvar ou fechar o modal ele não apaga os dados os input, só se eu clicar em limpar
    - Testar funcionalidade de editar task
        - Testar ao alterar o status para concluido ou diferente de concluido, vendo se o checkbox é alterado
    - Testar funcionalidade de excluir task
    - Ver se ao atualizar o state se a contagem total é atualizada
    - Ver se os componentes estão sendo renderizados mais de uma vez, posso colocar um console.log toda ver que ele carrega ante sdo return